///
/// JHybridNitroNetworkInfoSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroNetworkInfoSpec.hpp"

// Forward declaration of `ConnectionType` to properly resolve imports.
namespace margelo::nitro::nitronetworkinfo { enum class ConnectionType; }
// Forward declaration of `NitroNetworkStatusInfo` to properly resolve imports.
namespace margelo::nitro::nitronetworkinfo { struct NitroNetworkStatusInfo; }

#include "ConnectionType.hpp"
#include "JConnectionType.hpp"
#include <functional>
#include "JFunc_void.hpp"
#include "NitroNetworkStatusInfo.hpp"
#include "JFunc_void_NitroNetworkStatusInfo.hpp"
#include "JNitroNetworkStatusInfo.hpp"

namespace margelo::nitro::nitronetworkinfo {

  jni::local_ref<JHybridNitroNetworkInfoSpec::jhybriddata> JHybridNitroNetworkInfoSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroNetworkInfoSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroNetworkInfoSpec::initHybrid),
    });
  }

  size_t JHybridNitroNetworkInfoSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  bool JHybridNitroNetworkInfoSpec::getIsConnected() {
    static const auto method = javaClassStatic()->getMethod<jboolean()>("isConnected");
    auto __result = method(_javaPart);
    return static_cast<bool>(__result);
  }
  ConnectionType JHybridNitroNetworkInfoSpec::getConnectionType() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JConnectionType>()>("getConnectionType");
    auto __result = method(_javaPart);
    return __result->toCpp();
  }

  // Methods
  std::function<void()> JHybridNitroNetworkInfoSpec::addListener(const std::function<void(const NitroNetworkStatusInfo&)>& listener) {
      static const auto method = javaClassStatic()->getMethod<jni::local_ref<JFunc_void::javaobject>(jni::alias_ref<JFunc_void_NitroNetworkStatusInfo::javaobject>)>("addListener_cxx");

      auto __result = method(_javaPart, JFunc_void_NitroNetworkStatusInfo_cxx::fromCpp(listener));

      if (__result->isInstanceOf(JFunc_void_cxx::javaClassStatic())) {
          return jni::static_ref_cast<JFunc_void_cxx::javaobject>(__result)->cthis()->getFunction();
      }

      auto weakRef = jni::make_weak(__result);
      return [weakRef]() {
          if (auto strongRef = weakRef.lockLocal()) {
              strongRef->invoke();
          }
      };
  }

} // namespace margelo::nitro::nitronetworkinfo
