///
/// JConnectionType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "ConnectionType.hpp"

namespace margelo::nitro::nitronetworkinfo {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "ConnectionType" and the the Kotlin enum "ConnectionType".
   */
  struct JConnectionType final: public jni::JavaClass<JConnectionType> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitronetworkinfo/ConnectionType;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum ConnectionType.
     */
    [[maybe_unused]]
    [[nodiscard]]
    ConnectionType toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("value");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<ConnectionType>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JConnectionType> fromCpp(ConnectionType value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldUNKNOWN = clazz->getStaticField<JConnectionType>("UNKNOWN");
      static const auto fieldETHERNET = clazz->getStaticField<JConnectionType>("ETHERNET");
      static const auto fieldWIFI = clazz->getStaticField<JConnectionType>("WIFI");
      static const auto fieldCELLULAR = clazz->getStaticField<JConnectionType>("CELLULAR");
      
      switch (value) {
        case ConnectionType::UNKNOWN:
          return clazz->getStaticFieldValue(fieldUNKNOWN);
        case ConnectionType::ETHERNET:
          return clazz->getStaticFieldValue(fieldETHERNET);
        case ConnectionType::WIFI:
          return clazz->getStaticFieldValue(fieldWIFI);
        case ConnectionType::CELLULAR:
          return clazz->getStaticFieldValue(fieldCELLULAR);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::nitronetworkinfo
