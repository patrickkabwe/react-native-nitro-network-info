///
/// HybridNitroNetworkInfoSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridNitroNetworkInfoSpec``
public protocol HybridNitroNetworkInfoSpec_protocol: HybridObject {
  // Properties
  var isConnected: Bool { get }
  var connectionType: ConnectionType { get }

  // Methods
  func addListener(listener: @escaping (_ networkInfo: NitroNetworkStatusInfo) -> Void) throws -> () -> Void
}

/// See ``HybridNitroNetworkInfoSpec``
open class HybridNitroNetworkInfoSpec_base {
  private weak var cxxWrapper: HybridNitroNetworkInfoSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridNitroNetworkInfoSpec_cxx {
  #if DEBUG
    guard self is HybridNitroNetworkInfoSpec else {
      fatalError("`self` is not a `HybridNitroNetworkInfoSpec`! Did you accidentally inherit from `HybridNitroNetworkInfoSpec_base` instead of `HybridNitroNetworkInfoSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNitroNetworkInfoSpec_cxx(self as! HybridNitroNetworkInfoSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the NitroNetworkInfo HybridObject.
 * Implement this protocol to create Swift-based instances of NitroNetworkInfo.
 * ```swift
 * class HybridNitroNetworkInfo : HybridNitroNetworkInfoSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNitroNetworkInfoSpec = HybridNitroNetworkInfoSpec_protocol & HybridNitroNetworkInfoSpec_base
