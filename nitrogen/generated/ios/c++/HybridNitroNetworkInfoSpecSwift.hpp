///
/// HybridNitroNetworkInfoSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroNetworkInfoSpec.hpp"

// Forward declaration of `HybridNitroNetworkInfoSpec_cxx` to properly resolve imports.
namespace NitroNetworkInfo { class HybridNitroNetworkInfoSpec_cxx; }

// Forward declaration of `ConnectionType` to properly resolve imports.
namespace margelo::nitro::nitronetworkinfo { enum class ConnectionType; }
// Forward declaration of `NitroNetworkStatusInfo` to properly resolve imports.
namespace margelo::nitro::nitronetworkinfo { struct NitroNetworkStatusInfo; }

#include "ConnectionType.hpp"
#include <functional>
#include "NitroNetworkStatusInfo.hpp"

#include "NitroNetworkInfo-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitronetworkinfo {

  /**
   * The C++ part of HybridNitroNetworkInfoSpec_cxx.swift.
   *
   * HybridNitroNetworkInfoSpecSwift (C++) accesses HybridNitroNetworkInfoSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroNetworkInfoSpec_cxx can directly inherit from the C++ class HybridNitroNetworkInfoSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroNetworkInfoSpecSwift: public virtual HybridNitroNetworkInfoSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroNetworkInfoSpecSwift(const NitroNetworkInfo::HybridNitroNetworkInfoSpec_cxx& swiftPart):
      HybridObject(HybridNitroNetworkInfoSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroNetworkInfo::HybridNitroNetworkInfoSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    inline bool getIsConnected() noexcept override {
      return _swiftPart.isConnected();
    }
    inline ConnectionType getConnectionType() noexcept override {
      auto __result = _swiftPart.getConnectionType();
      return static_cast<ConnectionType>(__result);
    }

  public:
    // Methods
    inline std::function<void()> addListener(const std::function<void(const NitroNetworkStatusInfo& /* networkInfo */)>& listener) override {
      auto __result = _swiftPart.addListener(listener);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroNetworkInfo::HybridNitroNetworkInfoSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitronetworkinfo
